from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name=None, last_name=None, patronymic=None, phone_number=None, discount_percent=None, city=None, street=None, zip_code=None, id=None):  # noqa: E501
        """CustomerCard - a model defined in OpenAPI

        :param first_name: The first_name of this CustomerCard.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this CustomerCard.  # noqa: E501
        :type last_name: str
        :param patronymic: The patronymic of this CustomerCard.  # noqa: E501
        :type patronymic: str
        :param phone_number: The phone_number of this CustomerCard.  # noqa: E501
        :type phone_number: str
        :param discount_percent: The discount_percent of this CustomerCard.  # noqa: E501
        :type discount_percent: int
        :param city: The city of this CustomerCard.  # noqa: E501
        :type city: str
        :param street: The street of this CustomerCard.  # noqa: E501
        :type street: str
        :param zip_code: The zip_code of this CustomerCard.  # noqa: E501
        :type zip_code: str
        :param id: The id of this CustomerCard.  # noqa: E501
        :type id: int
        """
        self.openapi_types = {
            'first_name': str,
            'last_name': str,
            'patronymic': str,
            'phone_number': str,
            'discount_percent': int,
            'city': str,
            'street': str,
            'zip_code': str,
            'id': int
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'patronymic': 'patronymic',
            'phone_number': 'phoneNumber',
            'discount_percent': 'discountPercent',
            'city': 'city',
            'street': 'street',
            'zip_code': 'zipCode',
            'id': 'id'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._patronymic = patronymic
        self._phone_number = phone_number
        self._discount_percent = discount_percent
        self._city = city
        self._street = street
        self._zip_code = zip_code
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'CustomerCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomerCard of this CustomerCard.  # noqa: E501
        :rtype: CustomerCard
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self) -> str:
        """Gets the first_name of this CustomerCard.


        :return: The first_name of this CustomerCard.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this CustomerCard.


        :param first_name: The first_name of this CustomerCard.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this CustomerCard.


        :return: The last_name of this CustomerCard.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this CustomerCard.


        :param last_name: The last_name of this CustomerCard.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def patronymic(self) -> str:
        """Gets the patronymic of this CustomerCard.


        :return: The patronymic of this CustomerCard.
        :rtype: str
        """
        return self._patronymic

    @patronymic.setter
    def patronymic(self, patronymic: str):
        """Sets the patronymic of this CustomerCard.


        :param patronymic: The patronymic of this CustomerCard.
        :type patronymic: str
        """

        self._patronymic = patronymic

    @property
    def phone_number(self) -> str:
        """Gets the phone_number of this CustomerCard.


        :return: The phone_number of this CustomerCard.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number: str):
        """Sets the phone_number of this CustomerCard.


        :param phone_number: The phone_number of this CustomerCard.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def discount_percent(self) -> int:
        """Gets the discount_percent of this CustomerCard.


        :return: The discount_percent of this CustomerCard.
        :rtype: int
        """
        return self._discount_percent

    @discount_percent.setter
    def discount_percent(self, discount_percent: int):
        """Sets the discount_percent of this CustomerCard.


        :param discount_percent: The discount_percent of this CustomerCard.
        :type discount_percent: int
        """
        if discount_percent is None:
            raise ValueError("Invalid value for `discount_percent`, must not be `None`")  # noqa: E501

        self._discount_percent = discount_percent

    @property
    def city(self) -> str:
        """Gets the city of this CustomerCard.


        :return: The city of this CustomerCard.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this CustomerCard.


        :param city: The city of this CustomerCard.
        :type city: str
        """

        self._city = city

    @property
    def street(self) -> str:
        """Gets the street of this CustomerCard.


        :return: The street of this CustomerCard.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street: str):
        """Sets the street of this CustomerCard.


        :param street: The street of this CustomerCard.
        :type street: str
        """

        self._street = street

    @property
    def zip_code(self) -> str:
        """Gets the zip_code of this CustomerCard.


        :return: The zip_code of this CustomerCard.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code: str):
        """Sets the zip_code of this CustomerCard.


        :param zip_code: The zip_code of this CustomerCard.
        :type zip_code: str
        """

        self._zip_code = zip_code

    @property
    def id(self) -> int:
        """Gets the id of this CustomerCard.


        :return: The id of this CustomerCard.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this CustomerCard.


        :param id: The id of this CustomerCard.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id
