from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ReceiptItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_archetype=None, quantity=None, price=None):  # noqa: E501
        """ReceiptItem - a model defined in OpenAPI

        :param product_archetype: The product_archetype of this ReceiptItem.  # noqa: E501
        :type product_archetype: int
        :param quantity: The quantity of this ReceiptItem.  # noqa: E501
        :type quantity: int
        :param price: The price of this ReceiptItem.  # noqa: E501
        :type price: int
        """
        self.openapi_types = {
            'product_archetype': int,
            'quantity': int,
            'price': int
        }

        self.attribute_map = {
            'product_archetype': 'productArchetype',
            'quantity': 'quantity',
            'price': 'price'
        }

        self._product_archetype = product_archetype
        self._quantity = quantity
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'ReceiptItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReceiptItem of this ReceiptItem.  # noqa: E501
        :rtype: ReceiptItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_archetype(self) -> int:
        """Gets the product_archetype of this ReceiptItem.


        :return: The product_archetype of this ReceiptItem.
        :rtype: int
        """
        return self._product_archetype

    @product_archetype.setter
    def product_archetype(self, product_archetype: int):
        """Sets the product_archetype of this ReceiptItem.


        :param product_archetype: The product_archetype of this ReceiptItem.
        :type product_archetype: int
        """
        if product_archetype is None:
            raise ValueError("Invalid value for `product_archetype`, must not be `None`")  # noqa: E501

        self._product_archetype = product_archetype

    @property
    def quantity(self) -> int:
        """Gets the quantity of this ReceiptItem.


        :return: The quantity of this ReceiptItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this ReceiptItem.


        :param quantity: The quantity of this ReceiptItem.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def price(self) -> int:
        """Gets the price of this ReceiptItem.


        :return: The price of this ReceiptItem.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price: int):
        """Sets the price of this ReceiptItem.


        :param price: The price of this ReceiptItem.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price
