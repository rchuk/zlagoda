from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.receipt_item import ReceiptItem
from openapi_server import util

from openapi_server.models.receipt_item import ReceiptItem  # noqa: E501

class Receipt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, cashier_id=None, customer_card_id=None, date_time=None, total_price=None, vat=None, items=None):  # noqa: E501
        """Receipt - a model defined in OpenAPI

        :param id: The id of this Receipt.  # noqa: E501
        :type id: int
        :param cashier_id: The cashier_id of this Receipt.  # noqa: E501
        :type cashier_id: int
        :param customer_card_id: The customer_card_id of this Receipt.  # noqa: E501
        :type customer_card_id: int
        :param date_time: The date_time of this Receipt.  # noqa: E501
        :type date_time: datetime
        :param total_price: The total_price of this Receipt.  # noqa: E501
        :type total_price: int
        :param vat: The vat of this Receipt.  # noqa: E501
        :type vat: int
        :param items: The items of this Receipt.  # noqa: E501
        :type items: List[ReceiptItem]
        """
        self.openapi_types = {
            'id': int,
            'cashier_id': int,
            'customer_card_id': int,
            'date_time': datetime,
            'total_price': int,
            'vat': int,
            'items': List[ReceiptItem]
        }

        self.attribute_map = {
            'id': 'id',
            'cashier_id': 'cashierId',
            'customer_card_id': 'customerCardId',
            'date_time': 'dateTime',
            'total_price': 'totalPrice',
            'vat': 'vat',
            'items': 'items'
        }

        self._id = id
        self._cashier_id = cashier_id
        self._customer_card_id = customer_card_id
        self._date_time = date_time
        self._total_price = total_price
        self._vat = vat
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'Receipt':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Receipt of this Receipt.  # noqa: E501
        :rtype: Receipt
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Receipt.


        :return: The id of this Receipt.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Receipt.


        :param id: The id of this Receipt.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def cashier_id(self) -> int:
        """Gets the cashier_id of this Receipt.


        :return: The cashier_id of this Receipt.
        :rtype: int
        """
        return self._cashier_id

    @cashier_id.setter
    def cashier_id(self, cashier_id: int):
        """Sets the cashier_id of this Receipt.


        :param cashier_id: The cashier_id of this Receipt.
        :type cashier_id: int
        """
        if cashier_id is None:
            raise ValueError("Invalid value for `cashier_id`, must not be `None`")  # noqa: E501

        self._cashier_id = cashier_id

    @property
    def customer_card_id(self) -> int:
        """Gets the customer_card_id of this Receipt.


        :return: The customer_card_id of this Receipt.
        :rtype: int
        """
        return self._customer_card_id

    @customer_card_id.setter
    def customer_card_id(self, customer_card_id: int):
        """Sets the customer_card_id of this Receipt.


        :param customer_card_id: The customer_card_id of this Receipt.
        :type customer_card_id: int
        """

        self._customer_card_id = customer_card_id

    @property
    def date_time(self) -> datetime:
        """Gets the date_time of this Receipt.


        :return: The date_time of this Receipt.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time: datetime):
        """Sets the date_time of this Receipt.


        :param date_time: The date_time of this Receipt.
        :type date_time: datetime
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def total_price(self) -> int:
        """Gets the total_price of this Receipt.


        :return: The total_price of this Receipt.
        :rtype: int
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price: int):
        """Sets the total_price of this Receipt.


        :param total_price: The total_price of this Receipt.
        :type total_price: int
        """
        if total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")  # noqa: E501

        self._total_price = total_price

    @property
    def vat(self) -> int:
        """Gets the vat of this Receipt.


        :return: The vat of this Receipt.
        :rtype: int
        """
        return self._vat

    @vat.setter
    def vat(self, vat: int):
        """Sets the vat of this Receipt.


        :param vat: The vat of this Receipt.
        :type vat: int
        """
        if vat is None:
            raise ValueError("Invalid value for `vat`, must not be `None`")  # noqa: E501

        self._vat = vat

    @property
    def items(self) -> List[ReceiptItem]:
        """Gets the items of this Receipt.


        :return: The items of this Receipt.
        :rtype: List[ReceiptItem]
        """
        return self._items

    @items.setter
    def items(self, items: List[ReceiptItem]):
        """Sets the items of this Receipt.


        :param items: The items of this Receipt.
        :type items: List[ReceiptItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items
