from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archetype=None, upc=None, price=None, quantity=None, id=None, has_discount=None):  # noqa: E501
        """Product - a model defined in OpenAPI

        :param archetype: The archetype of this Product.  # noqa: E501
        :type archetype: int
        :param upc: The upc of this Product.  # noqa: E501
        :type upc: str
        :param price: The price of this Product.  # noqa: E501
        :type price: int
        :param quantity: The quantity of this Product.  # noqa: E501
        :type quantity: int
        :param id: The id of this Product.  # noqa: E501
        :type id: int
        :param has_discount: The has_discount of this Product.  # noqa: E501
        :type has_discount: bool
        """
        self.openapi_types = {
            'archetype': int,
            'upc': str,
            'price': int,
            'quantity': int,
            'id': int,
            'has_discount': bool
        }

        self.attribute_map = {
            'archetype': 'archetype',
            'upc': 'upc',
            'price': 'price',
            'quantity': 'quantity',
            'id': 'id',
            'has_discount': 'hasDiscount'
        }

        self._archetype = archetype
        self._upc = upc
        self._price = price
        self._quantity = quantity
        self._id = id
        self._has_discount = has_discount

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product of this Product.  # noqa: E501
        :rtype: Product
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archetype(self) -> int:
        """Gets the archetype of this Product.


        :return: The archetype of this Product.
        :rtype: int
        """
        return self._archetype

    @archetype.setter
    def archetype(self, archetype: int):
        """Sets the archetype of this Product.


        :param archetype: The archetype of this Product.
        :type archetype: int
        """
        if archetype is None:
            raise ValueError("Invalid value for `archetype`, must not be `None`")  # noqa: E501

        self._archetype = archetype

    @property
    def upc(self) -> str:
        """Gets the upc of this Product.


        :return: The upc of this Product.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc: str):
        """Sets the upc of this Product.


        :param upc: The upc of this Product.
        :type upc: str
        """
        if upc is None:
            raise ValueError("Invalid value for `upc`, must not be `None`")  # noqa: E501

        self._upc = upc

    @property
    def price(self) -> int:
        """Gets the price of this Product.


        :return: The price of this Product.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price: int):
        """Sets the price of this Product.


        :param price: The price of this Product.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Product.


        :return: The quantity of this Product.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Product.


        :param quantity: The quantity of this Product.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def id(self) -> int:
        """Gets the id of this Product.


        :return: The id of this Product.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Product.


        :param id: The id of this Product.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def has_discount(self) -> bool:
        """Gets the has_discount of this Product.


        :return: The has_discount of this Product.
        :rtype: bool
        """
        return self._has_discount

    @has_discount.setter
    def has_discount(self, has_discount: bool):
        """Sets the has_discount of this Product.


        :param has_discount: The has_discount of this Product.
        :type has_discount: bool
        """
        if has_discount is None:
            raise ValueError("Invalid value for `has_discount`, must not be `None`")  # noqa: E501

        self._has_discount = has_discount
