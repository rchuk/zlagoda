from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.receipt_item_view import ReceiptItemView
from openapi_server import util

from openapi_server.models.receipt_item_view import ReceiptItemView  # noqa: E501

class ReceiptView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_card_id=None, items=None):  # noqa: E501
        """ReceiptView - a model defined in OpenAPI

        :param customer_card_id: The customer_card_id of this ReceiptView.  # noqa: E501
        :type customer_card_id: int
        :param items: The items of this ReceiptView.  # noqa: E501
        :type items: List[ReceiptItemView]
        """
        self.openapi_types = {
            'customer_card_id': int,
            'items': List[ReceiptItemView]
        }

        self.attribute_map = {
            'customer_card_id': 'customerCardId',
            'items': 'items'
        }

        self._customer_card_id = customer_card_id
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'ReceiptView':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReceiptView of this ReceiptView.  # noqa: E501
        :rtype: ReceiptView
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_card_id(self) -> int:
        """Gets the customer_card_id of this ReceiptView.


        :return: The customer_card_id of this ReceiptView.
        :rtype: int
        """
        return self._customer_card_id

    @customer_card_id.setter
    def customer_card_id(self, customer_card_id: int):
        """Sets the customer_card_id of this ReceiptView.


        :param customer_card_id: The customer_card_id of this ReceiptView.
        :type customer_card_id: int
        """

        self._customer_card_id = customer_card_id

    @property
    def items(self) -> List[ReceiptItemView]:
        """Gets the items of this ReceiptView.


        :return: The items of this ReceiptView.
        :rtype: List[ReceiptItemView]
        """
        return self._items

    @items.setter
    def items(self, items: List[ReceiptItemView]):
        """Sets the items of this ReceiptView.


        :param items: The items of this ReceiptView.
        :type items: List[ReceiptItemView]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items
