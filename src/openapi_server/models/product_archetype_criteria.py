from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductArchetypeCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset=None, limit=None, sort_field=None, sort_ascending=None):  # noqa: E501
        """ProductArchetypeCriteria - a model defined in OpenAPI

        :param offset: The offset of this ProductArchetypeCriteria.  # noqa: E501
        :type offset: int
        :param limit: The limit of this ProductArchetypeCriteria.  # noqa: E501
        :type limit: int
        :param sort_field: The sort_field of this ProductArchetypeCriteria.  # noqa: E501
        :type sort_field: str
        :param sort_ascending: The sort_ascending of this ProductArchetypeCriteria.  # noqa: E501
        :type sort_ascending: bool
        """
        self.openapi_types = {
            'offset': int,
            'limit': int,
            'sort_field': str,
            'sort_ascending': bool
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'sort_field': 'sortField',
            'sort_ascending': 'sortAscending'
        }

        self._offset = offset
        self._limit = limit
        self._sort_field = sort_field
        self._sort_ascending = sort_ascending

    @classmethod
    def from_dict(cls, dikt) -> 'ProductArchetypeCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductArchetypeCriteria of this ProductArchetypeCriteria.  # noqa: E501
        :rtype: ProductArchetypeCriteria
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self) -> int:
        """Gets the offset of this ProductArchetypeCriteria.


        :return: The offset of this ProductArchetypeCriteria.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset: int):
        """Sets the offset of this ProductArchetypeCriteria.


        :param offset: The offset of this ProductArchetypeCriteria.
        :type offset: int
        """

        self._offset = offset

    @property
    def limit(self) -> int:
        """Gets the limit of this ProductArchetypeCriteria.


        :return: The limit of this ProductArchetypeCriteria.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit: int):
        """Sets the limit of this ProductArchetypeCriteria.


        :param limit: The limit of this ProductArchetypeCriteria.
        :type limit: int
        """

        self._limit = limit

    @property
    def sort_field(self) -> str:
        """Gets the sort_field of this ProductArchetypeCriteria.


        :return: The sort_field of this ProductArchetypeCriteria.
        :rtype: str
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field: str):
        """Sets the sort_field of this ProductArchetypeCriteria.


        :param sort_field: The sort_field of this ProductArchetypeCriteria.
        :type sort_field: str
        """

        self._sort_field = sort_field

    @property
    def sort_ascending(self) -> bool:
        """Gets the sort_ascending of this ProductArchetypeCriteria.


        :return: The sort_ascending of this ProductArchetypeCriteria.
        :rtype: bool
        """
        return self._sort_ascending

    @sort_ascending.setter
    def sort_ascending(self, sort_ascending: bool):
        """Sets the sort_ascending of this ProductArchetypeCriteria.


        :param sort_ascending: The sort_ascending of this ProductArchetypeCriteria.
        :type sort_ascending: bool
        """

        self._sort_ascending = sort_ascending
