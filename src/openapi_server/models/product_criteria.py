from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset=None, limit=None, sort_field=None, sort_ascending=None, category_ids=None, upc=None, name=None, has_discount=None, query=None):  # noqa: E501
        """ProductCriteria - a model defined in OpenAPI

        :param offset: The offset of this ProductCriteria.  # noqa: E501
        :type offset: int
        :param limit: The limit of this ProductCriteria.  # noqa: E501
        :type limit: int
        :param sort_field: The sort_field of this ProductCriteria.  # noqa: E501
        :type sort_field: str
        :param sort_ascending: The sort_ascending of this ProductCriteria.  # noqa: E501
        :type sort_ascending: bool
        :param category_ids: The category_ids of this ProductCriteria.  # noqa: E501
        :type category_ids: List[int]
        :param upc: The upc of this ProductCriteria.  # noqa: E501
        :type upc: str
        :param name: The name of this ProductCriteria.  # noqa: E501
        :type name: str
        :param has_discount: The has_discount of this ProductCriteria.  # noqa: E501
        :type has_discount: bool
        :param query: The query of this ProductCriteria.  # noqa: E501
        :type query: str
        """
        self.openapi_types = {
            'offset': int,
            'limit': int,
            'sort_field': str,
            'sort_ascending': bool,
            'category_ids': List[int],
            'upc': str,
            'name': str,
            'has_discount': bool,
            'query': str
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'sort_field': 'sortField',
            'sort_ascending': 'sortAscending',
            'category_ids': 'categoryIds',
            'upc': 'upc',
            'name': 'name',
            'has_discount': 'hasDiscount',
            'query': 'query'
        }

        self._offset = offset
        self._limit = limit
        self._sort_field = sort_field
        self._sort_ascending = sort_ascending
        self._category_ids = category_ids
        self._upc = upc
        self._name = name
        self._has_discount = has_discount
        self._query = query

    @classmethod
    def from_dict(cls, dikt) -> 'ProductCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductCriteria of this ProductCriteria.  # noqa: E501
        :rtype: ProductCriteria
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self) -> int:
        """Gets the offset of this ProductCriteria.


        :return: The offset of this ProductCriteria.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset: int):
        """Sets the offset of this ProductCriteria.


        :param offset: The offset of this ProductCriteria.
        :type offset: int
        """

        self._offset = offset

    @property
    def limit(self) -> int:
        """Gets the limit of this ProductCriteria.


        :return: The limit of this ProductCriteria.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit: int):
        """Sets the limit of this ProductCriteria.


        :param limit: The limit of this ProductCriteria.
        :type limit: int
        """

        self._limit = limit

    @property
    def sort_field(self) -> str:
        """Gets the sort_field of this ProductCriteria.


        :return: The sort_field of this ProductCriteria.
        :rtype: str
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field: str):
        """Sets the sort_field of this ProductCriteria.


        :param sort_field: The sort_field of this ProductCriteria.
        :type sort_field: str
        """

        self._sort_field = sort_field

    @property
    def sort_ascending(self) -> bool:
        """Gets the sort_ascending of this ProductCriteria.


        :return: The sort_ascending of this ProductCriteria.
        :rtype: bool
        """
        return self._sort_ascending

    @sort_ascending.setter
    def sort_ascending(self, sort_ascending: bool):
        """Sets the sort_ascending of this ProductCriteria.


        :param sort_ascending: The sort_ascending of this ProductCriteria.
        :type sort_ascending: bool
        """

        self._sort_ascending = sort_ascending

    @property
    def category_ids(self) -> List[int]:
        """Gets the category_ids of this ProductCriteria.


        :return: The category_ids of this ProductCriteria.
        :rtype: List[int]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids: List[int]):
        """Sets the category_ids of this ProductCriteria.


        :param category_ids: The category_ids of this ProductCriteria.
        :type category_ids: List[int]
        """

        self._category_ids = category_ids

    @property
    def upc(self) -> str:
        """Gets the upc of this ProductCriteria.


        :return: The upc of this ProductCriteria.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc: str):
        """Sets the upc of this ProductCriteria.


        :param upc: The upc of this ProductCriteria.
        :type upc: str
        """

        self._upc = upc

    @property
    def name(self) -> str:
        """Gets the name of this ProductCriteria.


        :return: The name of this ProductCriteria.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProductCriteria.


        :param name: The name of this ProductCriteria.
        :type name: str
        """

        self._name = name

    @property
    def has_discount(self) -> bool:
        """Gets the has_discount of this ProductCriteria.


        :return: The has_discount of this ProductCriteria.
        :rtype: bool
        """
        return self._has_discount

    @has_discount.setter
    def has_discount(self, has_discount: bool):
        """Sets the has_discount of this ProductCriteria.


        :param has_discount: The has_discount of this ProductCriteria.
        :type has_discount: bool
        """

        self._has_discount = has_discount

    @property
    def query(self) -> str:
        """Gets the query of this ProductCriteria.


        :return: The query of this ProductCriteria.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query: str):
        """Sets the query of this ProductCriteria.


        :param query: The query of this ProductCriteria.
        :type query: str
        """

        self._query = query
