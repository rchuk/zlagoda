from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductArchetype(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, category=None, manufacturer=None, description=None, id=None):  # noqa: E501
        """ProductArchetype - a model defined in OpenAPI

        :param name: The name of this ProductArchetype.  # noqa: E501
        :type name: str
        :param category: The category of this ProductArchetype.  # noqa: E501
        :type category: int
        :param manufacturer: The manufacturer of this ProductArchetype.  # noqa: E501
        :type manufacturer: str
        :param description: The description of this ProductArchetype.  # noqa: E501
        :type description: str
        :param id: The id of this ProductArchetype.  # noqa: E501
        :type id: int
        """
        self.openapi_types = {
            'name': str,
            'category': int,
            'manufacturer': str,
            'description': str,
            'id': int
        }

        self.attribute_map = {
            'name': 'name',
            'category': 'category',
            'manufacturer': 'manufacturer',
            'description': 'description',
            'id': 'id'
        }

        self._name = name
        self._category = category
        self._manufacturer = manufacturer
        self._description = description
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'ProductArchetype':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductArchetype of this ProductArchetype.  # noqa: E501
        :rtype: ProductArchetype
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ProductArchetype.


        :return: The name of this ProductArchetype.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProductArchetype.


        :param name: The name of this ProductArchetype.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def category(self) -> int:
        """Gets the category of this ProductArchetype.


        :return: The category of this ProductArchetype.
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category: int):
        """Sets the category of this ProductArchetype.


        :param category: The category of this ProductArchetype.
        :type category: int
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def manufacturer(self) -> str:
        """Gets the manufacturer of this ProductArchetype.


        :return: The manufacturer of this ProductArchetype.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer: str):
        """Sets the manufacturer of this ProductArchetype.


        :param manufacturer: The manufacturer of this ProductArchetype.
        :type manufacturer: str
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")  # noqa: E501

        self._manufacturer = manufacturer

    @property
    def description(self) -> str:
        """Gets the description of this ProductArchetype.


        :return: The description of this ProductArchetype.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProductArchetype.


        :param description: The description of this ProductArchetype.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def id(self) -> int:
        """Gets the id of this ProductArchetype.


        :return: The id of this ProductArchetype.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ProductArchetype.


        :param id: The id of this ProductArchetype.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id
