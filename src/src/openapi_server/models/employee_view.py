# coding: utf-8

"""
    Zlagoda

    API for systems used by the employees of Zlagoda shops

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.employee_role import EmployeeRole
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EmployeeView(BaseModel):
    """
    EmployeeView
    """ # noqa: E501
    first_name: StrictStr = Field(alias="firstName")
    last_name: StrictStr = Field(alias="lastName")
    patronymic: Optional[StrictStr] = None
    role: EmployeeRole
    salary: StrictInt
    work_start_date: date = Field(alias="workStartDate")
    birth_date: date = Field(alias="birthDate")
    phone_number: StrictStr = Field(alias="phoneNumber")
    city: StrictStr
    street: StrictStr
    zip_code: StrictStr = Field(alias="zipCode")
    __properties: ClassVar[List[str]] = ["firstName", "lastName", "patronymic", "role", "salary", "workStartDate", "birthDate", "phoneNumber", "city", "street", "zipCode"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EmployeeView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EmployeeView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "patronymic": obj.get("patronymic"),
            "role": obj.get("role"),
            "salary": obj.get("salary"),
            "workStartDate": obj.get("workStartDate"),
            "birthDate": obj.get("birthDate"),
            "phoneNumber": obj.get("phoneNumber"),
            "city": obj.get("city"),
            "street": obj.get("street"),
            "zipCode": obj.get("zipCode")
        })
        return _obj


